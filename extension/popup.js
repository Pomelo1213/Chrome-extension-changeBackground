!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=7)}([function(n,e,t){var r=t(1);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(3)(r,o);r.locals&&(n.exports=r.locals)},function(n,e,t){(n.exports=t(2)(!1)).push([n.i,"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\np {\n  font-size: 15px;\n  padding: 5px 0;\n}\nbody {\n  padding: 0 5px;\n  width: 250px;\n}\nspan {\n  font-size: 15px;\n}\nsection {\n  width: 100%;\n}\nbutton {\n  width: 45px;\n  height: 45px;\n  border-radius: 5px;\n  outline: none;\n  box-shadow: 1px 4px 10px 2px #CCC;\n}\nbutton:hover {\n  box-shadow: 1px 4px 10px 2px #CCC;\n  transform: translateY(-2%);\n  transition: all 0.5s;\n}\n.reset {\n  height: 20px;\n  box-shadow: none;\n}\n.upload {\n  height: 20px;\n  margin-bottom: 2px;\n  position: relative;\n  top: -2px;\n}\n.uploadImage {\n  width: 100%;\n  height: 50px;\n  border: 1px solid #aaa;\n}\n.hidden {\n  display: none;\n}\n.changeColor {\n  margin-top: 5px;\n  width: 100%;\n  padding: 10px 0;\n  background-color: #fafafa;\n  border: 1px solid #aaa;\n  border-radius: 5px;\n  display: flex;\n  justify-content: space-around;\n}\n.changeImg {\n  margin-top: 5px;\n  width: 240px;\n  height: 150px;\n  overflow: scroll;\n}\n.changeImg img {\n  width: 32%;\n  height: 75px;\n  margin-right: 5px;\n  border-radius: 5px;\n}\n.changeImg img:nth-child(3n) {\n  position: relative;\n  right: -1px;\n  margin-right: -14px;\n}\n.fileload {\n  float: right;\n  margin-right: -33%;\n}\n.section {\n  padding: 5px 0;\n}\n",""])},function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(n){return"/*# sourceURL="+r.sourceRoot+n+" */"});return[t].concat(i).concat([o]).join("\n")}var a;return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<n.length;o++){var a=n[o];"number"==typeof a[0]&&r[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e,t){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(n){var e={};return function(n,t){if("function"==typeof n)return n();if(void 0===e[n]){var r=function(n,e){return e?e.querySelector(n):document.querySelector(n)}.call(this,n,t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}}(),c=null,u=0,l=[],f=t(4);function d(n,e){for(var t=0;t<n.length;t++){var r=n[t],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(b(r.parts[a],e))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(b(r.parts[a],e));i[r.id]={id:r.id,refs:1,parts:s}}}}function p(n,e){for(var t=[],r={},o=0;o<n.length;o++){var i=n[o],a=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):t.push(r[a]={id:a,parts:[s]})}return t}function h(n,e){var t=s(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===n.insertAt)r?r.nextSibling?t.insertBefore(e,r.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),l.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(n.insertAt.before,t);t.insertBefore(e,o)}}function g(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=l.indexOf(n);e>=0&&l.splice(e,1)}function m(n){var e=document.createElement("style");if(void 0===n.attrs.type&&(n.attrs.type="text/css"),void 0===n.attrs.nonce){var r=function(){0;return t.nc}();r&&(n.attrs.nonce=r)}return v(e,n.attrs),h(n,e),e}function v(n,e){Object.keys(e).forEach(function(t){n.setAttribute(t,e[t])})}function b(n,e){var t,r,o,i;if(e.transform&&n.css){if(!(i="function"==typeof e.transform?e.transform(n.css):e.transform.default(n.css)))return function(){};n.css=i}if(e.singleton){var a=u++;t=c||(c=m(e)),r=w.bind(null,t,a,!1),o=w.bind(null,t,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return void 0===n.attrs.type&&(n.attrs.type="text/css"),n.attrs.rel="stylesheet",v(e,n.attrs),h(n,e),e}(e),r=function(n,e,t){var r=t.css,o=t.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=n.href;n.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,t,e),o=function(){g(t),t.href&&URL.revokeObjectURL(t.href)}):(t=m(e),r=function(n,e){var t=e.css,r=e.media;r&&n.setAttribute("media",r);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){g(t)});return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=p(n,e);return d(t,e),function(n){for(var r=[],o=0;o<t.length;o++){var a=t[o];(s=i[a.id]).refs--,r.push(s)}n&&d(p(n,e),e);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete i[s.id]}}}};var y,x=(y=[],function(n,e){return y[n]=e,y.filter(Boolean).join("\n")});function w(n,e,t,r){var o=t?"":r.css;if(n.styleSheet)n.styleSheet.cssText=x(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,r=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var o,i=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},,,function(n,e,t){"use strict";t.r(e);t(0);function r(n){var e=function(n){var e=document.createElement("button");return e.style.backgroundColor=n,e}(n);return e.addEventListener("click",function(){chrome.runtime.sendMessage({type:"Color",src:n},function(){console.log("change color success")})},!1),e}function o(n){var e=function(n){var e=document.createElement("Img");return e.setAttribute("src",n),e}(n);return e.addEventListener("click",function(){chrome.runtime.sendMessage({type:"Img",src:n},function(){console.log("change Img success")})},!1),e}var i=document.getElementById("changeColor"),a=document.getElementById("select"),s=document.getElementById("changeImg"),c=document.getElementById("reset"),u=document.getElementById("fileload"),l=["http://h1.ioliu.cn//bing/GodrevyLighthouse_EN-AU10503280912_1920x1080.jpg"];(function(n,e,t){for(var r=0,o=n;r<o.length;r++){var i=e(o[r]);t.appendChild(i)}})(["#e0633b","#f9d46b","#276ff6","#57b793"],r,i),function(n){chrome.storage.local.get(function(e){console.log("currentStorage--\x3e",e),e.hasOwnProperty("datas")||chrome.storage.local.set({datas:n})})}(l),chrome.storage.local.get("datas",function(n){for(var e=0,t=n.datas;e<t.length;e++){var r=o(t[e]);console.log(r),s.appendChild(r)}c.addEventListener("click",function(){chrome.storage.local.clear(function(){})},!1),function(n){chrome.storage.local.get("background",function(e){n.value=e.background,n.addEventListener("change",function(){chrome.runtime.sendMessage({type:"Select",src:this.value})},!1),chrome.storage.local.set({background:n.value})})}(a),function(n,e){n.addEventListener("change",function(n){var t=this.files[0];if(console.log(t),"image"==t.type.split("/")[0])if(Math.round(t.size/1024/1024)>=3)console.log("请上传小于少于3M的图片");else{var r=new FileReader;r.readAsDataURL(t),r.onload=function(){var n=o(r.result);chrome.storage.local.get("datas",function(t){chrome.storage.local.set({datas:t.datas.concat(r.result.toString())},function(){chrome.runtime.lastError?alert("存不下， 存不下， 存不下😂"):e.appendChild(n)})})}}else console.log("请上传图片")},!1)}(u,s),console.log(s)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,